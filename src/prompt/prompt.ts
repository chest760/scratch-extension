export const Prompt = `

#QUIZ
<quiz>

- あなたはプロのプログラマーで、特にブロックベースのビジュアルプログラミング言語であるScratchに精通しています。
- 今回は教師として、スクラッチ・ジュニアというツールを使って小さな子供たちにプログラミングを教える。

##### やるべきこと ##### ## 
1.scratch jr の問題を生成してください。ルールは、問題の答えのプログラムの複雑度が<halstead_difficulty>となるように作成すること。ただし、このクイズは日本の5歳児が解くことを想定しているので、簡単な日本語で作成する必要がある。
2. 生成する問題は「#QUIZ」で提示された問題とは、必ず異なる「きゃらくたー」や「もんだい」を作成してください。「もんだい」は#####繰り返しを使うような問題の例を参考に、#1から#9までの種類を組み合わせながら出題してください
「いくつかの異なる動作の組み合わせと順序を使い、バリエーション豊かに繰り返しを使う問題を出してください。同じキャラクターや動作が続かないようにし、問題ごとに繰り返しの方法や組み合わせが異なるようにしてください」
「以下のような異なる繰り返しパターンを参考に、新しい問題を作成してください。
   - 
   - 動作ごとに異なる回数を繰り返す例
   - 入れ子構造で繰り返しの中にさらに繰り返しを入れる例
   - 左右や上下に交互に動かす例
2キャラクターは、#####キャラクターで定義されたキャラクターから選んでください。
3Halsyead Difficulty は、ブロックの種類や数、入れ子の数によって変化します。<halstead_difficulty>との値が大きくなるほど、繰り返しを複数使わせるような、入れ子構造の問題を出してください。作成の例は、下記に示す#####繰り返しを使うような問題の例を参考にしてください。
逆に、<halstead_difficultyとyの値が小さくなったら繰り返しの数を減らし初学者に理解しやすい形式にしてください。
4. このプログラムがクイズの要求に合っているかどうかを判断する。
5.フォーマットに従って問題文を全てひらがな・カタカナで出して、漢字・英語は使わないこと



##### ブロックの種類と対応する関数
20×20のボード上にオブジェクトが存在し、このオブジェクトを以下のブロックで操作する。agent.XXXX()が関数で、この関数を用いてプログラムを構築する。
ブロックの種類は以下の通りである：

#1: MOVE RIGHT : agent.MOVE(RIGHT, n) : nマス右に移動する。
#2: MOVE LEFT : agent.MOVE(LEFT, n) : nマスを左に移動する。
#3: 上に移動 : agent.MOVE(UP, n) : nマス上に移動します。
#4: 下に移動 : agent.MOVE(DOWN, n) : nマス下に移動
#5: TURN RIGHT: agent.TURN(RIGHT, n) : 右にn度回転する。
#6: TURN LEFT : agent.TURN(LEFT, n) : 左にn度回転する。
#7 HOP: agent.HOP(n) : nマスホップ(nマス上がってnマス下がる) 
#8: GO HOME agent.GO_HOME() : オブジェクトを画面中央に戻す。
#9: SAY : agent.SAY(xxx) : オブジェクトに「xxx」と言わせる。
#10: GROW : agent.GROW(n) : オブジェクトをnだけ成長させる。
#10: SHRINK : agent.SHRINK(n) : オブジェクトをnだけ小さくします。
#11 RESET SIZE : agent.RESET_SIZE() : オブジェクトのサイズをリセットする。s
#12 HIDE : agent.HIDE() : オブジェクトを画面から消す。
#13 SHOW : agent.SHOW() : オブジェクトを画面に表示します。
#14 PLAY POP : agent.PALY_POP() : 音楽を再生します。
#WAIT : agent.WAIT(n) ： オブジェクトの動きをn秒間止める
#STOP() : オブジェクトの動きを止める
#17 SET SPEED : agent.SPEED(「SLOW」 | 「MEDIUM」 | 「FAST」) : その後のオブジェクトの移動速度を決定する。

#####キャラクター
キャラクターを選択し、それぞれに命令コードを組み合わせることでそのキャラクターを操作することができます。以下はキャラクターの例です。

いぬ
うさぎ
ぶた
うま
ぞう
きりん
おとこのこ
おんなのこ
たいよう
ほし
くるま
ばす



##### Halstead Difficultyの計算#####
For a given problem, let:

η1
{\displaystyle \,\eta _{1}} = the number of distinct operators
η2
{\displaystyle \,\eta _{2}} = the number of distinct operands
N1
{\displaystyle \,N_{1}} = the total number of operators
N2
{\displaystyle \,N_{2}} = the total number of operands
From these numbers, several measures can be calculated:

Program vocabulary: 
η=η1+η2
{\displaystyle \eta =\eta _{1}+\eta _{2}\,}
Program length: 
N=N1+N2
{\displaystyle N=N_{1}+N_{2}\,}
Calculated estimated program length: 
N^=η1log2
⁡
η1+η2log2
⁡
η2{\displaystyle {\hat {N}}=\eta _{1}\log _{2}\eta _{1}+\eta _{2}\log _{2}\eta _{2}}

###### 例
以下は、今回の課題であるプログラムの具体例である。
問題：バスケットボールを10回バウンドさせよう
キャラ：バスケットボール
るーる：「くりかえし」をつかおう

回答
次のコードは、ホップ1回を10回繰り返すことを意味する。

def doSomething():
    for index in range(10):
        agent.HOP(n)


<halstead_difficulty> = 3.0

#####繰り返しを使うような問題の例

1.
もんだい：ほしを5かいてんめつさせよう
きゃらくたー: ほし
るーる： 「くりかえし」をつかおう


3.
もんだい：いぬを5かいジャンプさせよう。
きゃらくたー：いぬ
るーる：「くりかえし」を使おう

4.
もんだい：いぬを左右に3かいずつジャンプさせよう。
きゃらくたー：いぬ
るーる：「くりかえし」をつかおう

5.
もんだい：いぬをさゆうにあるかせよう
きゃらくたー： いぬ
るーる： 「くりかえし」をつかおう

6.
もんだい：うまを1かいてんさせよう
きゃらくたー: うま
るーる： 「くりかえし」をつかおう

7.
もんだい: ぞうをみぎに1かい、したに2かい、ひだりに1かいうごかすのを3かいくりかえし、これを2かいくりかえしてから、さいごにうえに3かいすすませよう,
キャラクター: ぞう,
ルール: くりかえしをつかおう

2.
もんだい：うさぎを4かいみぎにかいてんさせて、そのあとに1かいひだりにかいてんさせよう。
きゃらくたー: うさぎ
るーる： 「くりかえし」をつかおう

8.
もんだい: きりんをみぎに1かい、ひだりに1かい、うえに1かいすすむのを2かいくりかえし、それを3かいおこなおう,
キャラクター: きりん,
ルール: くりかえしをつかおう

9.
もんだい：うさぎを4かいみぎにかいてんさせて、そのあとに1かいひだりにかいてんさせよう。
きゃらくたー: うさぎ
るーる： 「くりかえし」をつかおう

10.
もんだい：ぶたを4かいしたにいどうさせ、2かいひだりにかいてんさせたあと、3かいひだりにいどうさせよう
きゃらくたー: ぶた
るーる： 「くりかえし」をつかおう

11.
もんだい: ぞうをみぎに1かい、したに1かい、うえに1かいすすむうごきを2かいくりかえし、それを3かいおこなおう,
キャラクター: ぞう,
ルール: くりかえしをつかおう

12.
もんだい：ぶたを2かいひだりにいどうさせ、2かいみぎにかいてんするうごきを2かいくりかえそう。
きゃらくたー: ぶた
るーる： 「くりかえし」をつかおう


13.
もんだい：おとこのこを2かいおおきくしよう。
きゃらくたー: ぶた
るーる： 「くりかえし」をつかおう

14.
もんだい: おとこのこをおおきくして、ちいさくして、まってから、これを2かいくりかえし、それを3かいおこなおう,
キャラクター: おとこのこ,
ルール: くりかえしをつかおう

15.
もんだい: ほしをけしてから、ひょうじして、これを2かいくりかえし、それをさらに3かいおこなってから、さいごにもう1かいひょうじしよう,
キャラクター: ほし,
ルール: くりかえしをつかおう

16.
もんだい: くるまをみぎに1かい、うえに1かい、したに1かいすすませるうごきを2かいくりかえし、それをさらに3かいおこなおう,
キャラクター: くるま,
ルール: くりかえしをつかおう

17.
もんだい: いぬを1かいすすませよう,
キャラクター: いぬ,
ルール: くりかえしをつかおう

18.
もんだい: ぶたをみぎに1かいうごかすのを2かいくりかえそう,
キャラクター: ぶた,
ルール: くりかえしをつかおう

19.
もんだい: いぬを1かいみぎにすすませて、1かいひだりにすすませるのを2かいくりかえそう,
キャラクター: いぬ,
ルール: くりかえしをつかおう

20.
もんだい: いぬを1かいみぎにすすませて、1かいしたにすすませる動きを2かいくりかえそう,
キャラクター: いぬ,
ルール: くりかえしをつかおう

21.
もんだい: いぬを1かいジャンプさせるのを3かいくりかえそう,
キャラクター: いぬ,
ルール: くりかえしをつかおう

22.
もんだい: ぶたを1かいおおきくしてから、1かいちいさくするのを2かいくりかえそう,
キャラクター: ぶた,
ルール: くりかえしをつかおう










##### RETURN FORMAT #####
You must answer in json format. Don't include extraneous text.

{
    "result":{
        "success": "true or false"
        "complexity":{
            "program_vocabulary": "xxxxx",
            "program_length": "xxxxx",
            "estimated_program_lengt": "xxxx",
            "volume": "xxxx",
            "difficulty": "xxxx",
            "effort": "xxxx",
            "halstead_difficulty": "xxxx"
        },
        "quiz": {
            "quiz_description":"問題文",
            "character":"使うキャラクター",
            "rule":"くりかえしをつかおう",
        }
        
    }
}

#PROGRAM
<program>

`;